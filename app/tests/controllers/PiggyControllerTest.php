<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-09 at 16:58:19.
 */
class PiggyControllerTest extends TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $user = User::where('username', 'admin')->first();
        $this->be($user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->deleteSetting();
    }

    /**
     * @covers PiggyController::index
     */
    public function testIndex()
    {
        $this->createSetting();
        // Remove the following lines when you implement this test.
        $response = $this->action('GET', 'PiggyController@index');
        $view = $response->original;
        $this->assertResponseOk();

        // count should match.
        $count = Piggybank::count();
        $this->assertCount($count, $view['piggies']);

        // balance should be the balance of the account minus the sum of all
        // piggies, but it'll be hard
        $target = floatval(Piggybank::sum('target'));
        $this->assertEquals($target, $view['totalTarget']);
    }

    /**
     * @covers PiggyController::add
     */
    public function testAdd()
    {
        $this->createSetting();

        $response = $this->action('GET', 'PiggyController@add');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertSessionHas('previous');
        $this->assertEquals('Add new piggy bank', $view['title']);

    }

    /**
     * @covers PiggyController::add
     */
    public function testAddWithOldInput()
    {
        $this->createSetting();

        $oldData = [
            'name' => 'Old piggy name (old input)'
        ];
        $this->session(['_old_input' => $oldData]);

        $response = $this->action('GET', 'PiggyController@add');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Add new piggy bank', $view['title']);
        $this->assertEquals($oldData['name'], $view['prefilled']['name']);

    }

    /**
     * @covers PiggyController::postAdd
     */
    public function testPostAdd()
    {
        $this->createSetting();
        $user = User::whereUsername('admin')->first();
        $newData = [
            'user_id' => $user->id,
            'name'    => 'Test post add piggy bank',
            'amount'  => 0,
            'target'  => 1000,
            'order'   => 1
        ];
        $count = Piggybank::count();
        $this->action('POST', 'PiggyController@postAdd', $newData);
        $newCount = Piggybank::count();

        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('index');
        $this->assertEquals($count + 1, $newCount);
        $this->assertSessionHas('success');

        Piggybank::where('name', $newData['name'])->delete();
    }

    /**
     * @covers PiggyController::postAdd
     */
    public function testPostAddFailsValidator()
    {
        $this->createSetting();
        $user = User::whereUsername('admin')->first();
        $newData = [
            'user_id' => $user->id,
            'name'    => null,
            'amount'  => 0,
            'target'  => 1000,
            'order'   => 1
        ];
        $count = Piggybank::count();
        $this->action('POST', 'PiggyController@postAdd', $newData);
        $newCount = Piggybank::count();

        $this->assertResponseStatus(302);
        $this->assertEquals($count, $newCount);
        $this->assertSessionHas('error');
    }


    /**
     * @covers PiggyController::postAdd
     * @todo   Implement testPostAddFailsTrigger().
     */
    public function testPostAddFailsTrigger()
    {
        $this->createSetting();
        $user = User::whereUsername('admin')->first();
        $existing = Piggybank::first();
        $newData = [
            'user_id' => $user->id,
            'name'    => $existing->name,
            'amount'  => 0,
            'target'  => 1000,
            'order'   => 1
        ];
        $count = Piggybank::count();
        $this->action('POST', 'PiggyController@postAdd', $newData);
        $newCount = Piggybank::count();

        $this->assertResponseStatus(302);
        $this->assertEquals($count, $newCount);
        $this->assertSessionHas('error');
    }

    /**
     * @covers PiggyController::delete
     */
    public function testDelete()
    {
        $piggy = Piggybank::first();
        $this->createSetting();
        // Remove the following lines when you implement this test.
        $response = $this->action('GET', 'PiggyController@delete', $piggy->id);
        $view = $response->original;

        $this->assertSessionHas('previous');
        $this->assertEquals('Delete piggy bank ' . $piggy->name, $view['title']);
        $this->assertEquals($piggy->id, $view['piggy']->id);
        $this->assertResponseOk();

    }

    /**
     * @covers PiggyController::postDelete
     */
    public function testPostDelete()
    {
        $this->createSetting();

        // create a new piggy
        $user = User::where('username', 'admin')->first();
        $piggy = Piggybank::create(
            [
                'user_id' => $user->id,
                'name'    => 'TO be deleted soon.',
                'amount'  => 0,
                'target'  => 1000,
                'order'   => 1
            ]
        );
        $count = Piggybank::count();
        $this->action('POST', 'PiggyController@postDelete', $piggy->id);
        $newCount = Piggybank::count();

        $this->assertEquals($count - 1, $newCount);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
    }

    /**
     * @covers PiggyController::selectAccount
     */
    public function testSelectAccount()
    {
        $count = DB::table('accounts')->count();
        $response = $this->action('GET', 'PiggyController@selectAccount');
        $view = $response->original;

        $this->assertCount($count, $view['accounts']);
        $this->assertResponseOk();
        $this->assertEquals('Piggy banks', $view['title']);

    }

    /**
     * @covers PiggyController::postSelectAccount
     */
    public function testPostSelectAccount()
    {
        $account = Account::first();
        $count = Setting::count();

        $this->action('POST', 'PiggyController@postSelectAccount', ['account' => $account->id]);
        $newCount = Setting::count();
        $this->assertEquals($count + 1, $newCount);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggy');
        $this->assertSessionHas('success');
    }

    /**
     * @covers PiggyController::postSelectAccount
     */
    public function testPostSelectInvalidAccount()
    {
        $count = Setting::count();
        $this->action('POST', 'PiggyController@postSelectAccount', ['account' => 1000]);
        $newCount = Setting::count();
        $this->assertEquals($count, $newCount - 1);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
        $this->assertSessionHas('error');

    }

    /**
     * @covers PiggyController::edit
     */
    public function testEdit()
    {
        $this->createSetting();
        $piggy = Piggybank::first();
        $response = $this->action('GET', 'PiggyController@edit', $piggy->id);
        $view = $response->original;

        $this->assertEquals('Edit piggy bank "' . $piggy->name . '"', $view['title']);
        $this->assertEquals($piggy->id, $view['pig']->id);
    }

    /**
     * @covers PiggyController::edit
     */
    public function testEditWithOldInput()
    {
        $this->createSetting();
        $oldData = [
            'name' => 'Old piggy name (old input)'
        ];
        $this->session(['_old_input' => $oldData]);

        $piggy = Piggybank::first();
        $response = $this->action('GET', 'PiggyController@edit', $piggy->id);
        $view = $response->original;

        $this->assertEquals('Edit piggy bank "' . $piggy->name . '"', $view['title']);
        $this->assertEquals($piggy->id, $view['pig']->id);
        $this->assertEquals($oldData['name'], $view['prefilled']['name']);
    }

    /**
     * @covers PiggyController::postEdit
     */
    public function testPostEdit()
    {
        $this->createSetting();
        $user = User::where('username', 'admin')->first();
        $piggy = Piggybank::create(
            [
                'user_id' => $user->id,
                'name'    => 'TO be edited soon.' . rand(1000,9999),
                'amount'  => 0,
                'target'  => 1000,
                'order'   => 1
            ]
        );
        $editData = [
            'name' => 'Edited a piggy bank.' . rand(1000,9999),
            'target' => 1001
        ];
        // post!
        $this->call('POST', '/home/piggy/edit/' . $piggy->id, $editData);

        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('index');
        $this->assertSessionHas('success');

        $newPiggy = Piggybank::find($piggy->id);
        $this->assertEquals($editData['name'], $newPiggy->name);

        $newPiggy->delete();

    }

    /**
     * @covers PiggyController::postEdit
     */
    public function testPostEditFailsValidator()
    {
        $this->createSetting();
        $user = User::where('username', 'admin')->first();
        $piggy = Piggybank::create(
            [
                'user_id' => $user->id,
                'name'    => 'TO be edited soon.' . rand(1000,9999),
                'amount'  => 0,
                'target'  => 1000,
                'order'   => 1
            ]
        );
        $editData = [
            'name' => null
        ];
        // post!
        $this->call('POST', '/home/piggy/edit/' . $piggy->id, $editData);

        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('editpiggy',$piggy->id);
        $this->assertSessionHas('error');

        $newPiggy = Piggybank::find($piggy->id);
        $this->assertEquals($piggy->name, $newPiggy->name);

        $newPiggy->delete();

    }

    /**
     * @covers PiggyController::postEdit
     */
    public function testPostEditFailsTrigger()
    {
        $this->createSetting();
        $user = User::where('username', 'admin')->first();
        $piggy = Piggybank::create(
            [
                'user_id' => $user->id,
                'name'    => 'TO be edited soon.' . rand(1000,9999),
                'amount'  => 0,
                'target'  => 1000,
                'order'   => 1
            ]
        );

        $otherPiggy = Piggybank::where('id','!=',$piggy->id)->first();
        $editData = [
            'name' => $otherPiggy->name
        ];
        // post!
        $this->call('POST', '/home/piggy/edit/' . $piggy->id, $editData);

        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('editpiggy',$piggy->id);
        $this->assertSessionHas('error');

        $newPiggy = Piggybank::find($piggy->id);
        $this->assertEquals($piggy->name, $newPiggy->name);

        $newPiggy->delete();

    }

    /**
     * @covers PiggyController::updateAmount
     */
    public function testUpdateAmount()
    {
        $this->createSetting();
        $piggy = Piggybank::first();
        $response = $this->action('GET', 'PiggyController@updateAmount', $piggy->id);
        $view = $response->original;

        $this->assertEquals($piggy->id,$view['pig']->id);
        $this->assertResponseOk();
        $this->assertSessionHas('previous');
    }

    /**
     * @covers PiggyController::postUpdateAmount
     * @todo   Implement testPostUpdateAmount().
     */
    public function testPostUpdateAmount()
    {
        $this->createSetting();
        $piggy = Piggybank::first();
        $editData = [
            'amount' => 100
        ];
        $this->call('POST', '/home/piggy/amount/' . $piggy->id, $editData);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
        // is piggy updated?
        $newPiggy = Piggybank::find($piggy->id);

        $this->assertEquals(100,$newPiggy->amount);

        $newPiggy->amount = 0;
        $newPiggy->save();
    }

    /**
     * @covers PiggyController::dropPiggy
     */
    public function testDropPiggy()
    {
        $this->createSetting();
        $piggy = Piggybank::first();

        $originalOrder = $piggy->order;
        $order = $piggy->order + 1;

        $this->action('POST', 'PiggyController@dropPiggy', ['id' => $piggy->id,'position' => $order]);

        $this->assertResponseOk();
        $newPiggy = Piggybank::find($piggy->id);
        $this->assertEquals($newPiggy->order,$order);

        $newPiggy->order = $originalOrder;
        $newPiggy->save();
    }

    /**
     * @covers PiggyController::index
     */
    public function testIndexNoSetting()
    {
        $this->action('GET', 'PiggyController@index');
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::add
     */
    public function testAddNoSetting()
    {
        $this->action('GET', 'PiggyController@add');
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::postAdd
     */
    public function testPostAddNoSetting()
    {
        $this->action('POST', 'PiggyController@postAdd');
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::delete
     */
    public function testDeleteNoSetting()
    {
        $piggy = Piggybank::first();
        $this->action('GET', 'PiggyController@delete', $piggy->id);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::postDelete
     */
    public function testPostDeleteNoSetting()
    {
        $piggy = Piggybank::first();
        $this->action('POST', 'PiggyController@postDelete', $piggy->id);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::edit
     */
    public function testEditNoSetting()
    {
        $piggy = Piggybank::first();
        $this->action('GET', 'PiggyController@edit', $piggy->id);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::postEdit
     */
    public function testPostEditNoSetting()
    {
        $piggy = Piggybank::first();
        $this->action('POST', 'PiggyController@postEdit', $piggy->id);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::updateAmount
     */
    public function testUpdateAmountNoSetting()
    {
        $piggy = Piggybank::first();
        $this->action('GET', 'PiggyController@updateAmount', $piggy->id);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::postUpdateAmount
     */
    public function testPostUpdateAmountNoSetting()
    {
        $piggy = Piggybank::first();
        $this->action('POST', 'PiggyController@postUpdateAmount', $piggy->id);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }

    /**
     * @covers PiggyController::dropPiggy
     */
    public function testDropPiggyNoSetting()
    {
        $piggy = Piggybank::first();
        $this->action('POST', 'PiggyController@dropPiggy', $piggy->id);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('piggyselect');
    }


    protected function createSetting()
    {

        parent::setUp();
        $user = User::where('username', 'admin')->first();
        $account = Account::first();

        Setting::create(
            [
                'user_id'    => $user->id,
                'account_id' => null,
                'type'       => 'int',
                'name'       => 'piggyAccount',
                'date'       => null,
                'value'      => $account->id
            ]
        );
    }

    protected function deleteSetting()
    {
        $setting = Setting::where('name', 'piggyAccount')->first();
        if ($setting) {
            $setting->delete();
        }
    }
}
