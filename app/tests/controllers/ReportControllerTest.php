<?php
use Carbon\Carbon as Carbon;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-09 at 16:58:59.
 */
class ReportControllerTest extends TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $user = User::where('username', 'admin')->first();
        $this->be($user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ReportController::index
     * @todo   Implement testIndex().
     */
    public function testIndex()
    {
        $response = $this->action('GET', 'ReportController@index');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Reports', $view['title']);
        $this->assertCount(1, $view['years']);
    }

    /**
     * @covers ReportController::month
     * @todo   Implement testMonth().
     */
    public function testMonth()
    {
        $date = Carbon::createFromDate(2014, 1, 1);
        $response = $this->action('GET', 'ReportController@month', [$date->format('Y'), $date->format('m')]);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Report for ' . $date->format('F Y'), $view['title']);
        $this->assertEquals($date->format('Ymd'), $view['date']->format('Ymd'));
        $this->assertCount(3, $view['expenses']);
    }

    /**
     * @covers ReportController::monthPieChart
     */
    public function testMonthPieChart()
    {
        $date = Carbon::createFromDate(2014, 1, 1);
        $type = Type::orderBy(DB::Raw('RAND()'))->first();

        $response = $this->action(
            'GET', 'ReportController@monthPieChart', [$date->format('Y'), $date->format('m'), $type->type]
        );
        $jsonContent = $response->getContent();
        $json = json_decode($jsonContent);
        $this->assertResponseOk();

        // two columns:
        $this->assertCount(2, $json->cols);
        // TODO rows as many as we have components with expenses this month
    }

    /**
     * @covers ReportController::year
     */
    public function testYear()
    {
        $date = Carbon::createFromDate(2014, 1, 1);
        $response = $this->action('GET', 'ReportController@year', [$date->format('Y')]);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Report for ' . $date->format('Y'), $view['title']);
        $this->assertEquals($date->format('Ymd'), $view['date']->format('Ymd'));
    }

    /**
     * @covers ReportController::monthAccounts
     */
    public function testMonthAccounts()
    {
        $date = Carbon::createFromDate(2014, 1, 1);
        $response = $this->action('GET', 'ReportController@monthAccounts', [$date->format('Y'), $date->format('m')]);
        $jsonContent = $response->getContent();
        $json = json_decode($jsonContent);
        $this->assertResponseOk();

        $count = Account::count();
        $this->assertCount($count + 1, $json->cols);
    }

    /**
     * @covers ReportController::yearAccounts
     */
    public function testYearAccounts()
    {
        $date = Carbon::createFromDate(2014, 1, 1);
        $response = $this->action('GET', 'ReportController@yearAccounts', [$date->format('Y'), $date->format('m')]);
        $jsonContent = $response->getContent();
        $json = json_decode($jsonContent);
        $this->assertResponseOk();

        // days in year
        $count = 365;
        $this->assertCount($count, $json->rows);
    }

    /**
     * @covers ReportController::compareYear
     */
    public function testCompareYear()
    {
        $response = $this->action('GET', 'ReportController@compareYear', ['2013', '2014']);
        $view = $response->original;
        $this->assertResponseOk();

        $this->assertEquals('Comparing 2013 with 2014', $view['title']);
    }
}
