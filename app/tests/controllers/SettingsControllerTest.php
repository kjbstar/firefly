<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-09 at 16:59:06.
 */
class SettingsControllerTest extends TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $user = User::where('username', 'admin')->first();
        $this->be($user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SettingsController::index
     */
    public function testIndex()
    {
        foreach(Setting::get() as $s) {
            $s->delete();
        }
        $count = Setting::count();
        $response = $this->action('GET', 'SettingsController@index');
        $view = $response->original;
        $newCount = Setting::count();

        $this->assertResponseOk();
        $this->assertEquals('Settings',$view['title']);
        $this->assertSessionHas('previous');
        $this->assertEquals($count+3,$newCount);
    }

    /**
     * @covers SettingsController::postIndex
     * @depends testIndex
     */
    public function testPostIndex()
    {
        $account = Account::first();
        $data = [
            'predictionStart' => '2014-01-01',
            'frontpageAccount' => $account->id,
            'currency' => 1
        ];
        $this->action('POST', 'SettingsController@index',$data);
        $this->assertResponseStatus(302);

        $predictionStart = DB::table('settings')->where('name','predictionStart')->first();
        $this->assertEquals($data['predictionStart'],$predictionStart->value);

        $frontpageAccount = DB::table('settings')->where('name','frontpageAccount')->first();
        $this->assertEquals($data['frontpageAccount'],$frontpageAccount->value);
        $currency = DB::table('settings')->where('name','currency')->first();
        $this->assertEquals($data['currency'],$currency->value);

    }

    /**
     * @covers SettingsController::allowances
     */
    public function testAllowances()
    {
        $count = DB::table('settings')->where('name','defaultAllowance')->count();
        $response = $this->action('GET', 'SettingsController@allowances');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Allowances',$view['title']);
        $this->assertSessionHas('previous');
        $newCount = DB::table('settings')->where('name','defaultAllowance')->count();
        if($count == 0) {
            $this->assertEquals($count+1,$newCount);
        } else {
            $this->assertEquals($count,$newCount);
        }
        $this->assertEquals(0,$view['defaultAllowance']->value);
    }

    /**
     * @covers SettingsController::postAllowances
     * @depends testAllowances
     */
    public function testPostAllowances()
    {
        $data = [
            'defaultAllowance' => 1000
        ];
        $this->action('POST', 'SettingsController@allowances',$data);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');

        $setting = $newCount = DB::table('settings')->where('name','defaultAllowance')->first();
        $this->assertEquals($data['defaultAllowance'],$setting->value);
    }

    /**
     * @covers SettingsController::addAllowance
     */
    public function testAddAllowance()
    {
        $response = $this->action('GET', 'SettingsController@addAllowance');
        $view = $response->original;
        $count = DB::table('accounts')->count();
        $this->assertCount($count,$view['accounts']);
        $this->assertResponseOk();
        $this->assertSessionHas('previous');
        $this->assertEquals('Add a new allowance',$view['title']);
    }

    /**
     * @covers SettingsController::postAddAllowance
     */
    public function testPostAddAllowance()
    {
        $account = Account::first();
        $data = [
            'date' => '2014-02',
            'amount' => 1250,
            'account_id' => $account->id
        ];
        $count = DB::table('settings')->where('name','specificAllowance')->where('date',$data['date'].'-01')
            ->where('account_id',$data['account_id'])->count();

        $this->assertEquals(0,$count);
        $this->action('POST', 'SettingsController@addAllowance',$data);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');

        $newCount = DB::table('settings')->where('name','specificAllowance')->where('date',$data['date'].'-01')
            ->where('account_id',$data['account_id'])->count();

        $this->assertEquals(1,$newCount);

        foreach(Setting::where('name','specificAllowance')->get() as $s) {
            $s->delete();
        }

    }
    /**
     * @covers SettingsController::postAddAllowance
     */
    public function testPostAddAllowanceInvalidAccount()
    {
        $data = [
            'date' => '2014-03',
            'amount' => 1250,
            'account_id' => -1
        ];
        $this->action('POST', 'SettingsController@addAllowance',$data);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');

        $newCount = DB::table('settings')->where('name','specificAllowance')->where('date',$data['date'].'-01')
            ->where('value',$data['amount'])->count();

        $this->assertEquals(0,$newCount);

        foreach(Setting::where('name','specificAllowance')->get() as $s) {
            $s->delete();
        }

    }

    /**
     * @covers SettingsController::postAddAllowance
     */
    public function testPostAddAllowanceFailsValidator()
    {
        $account = Account::first();
        $data = [
            'date' => '2014-03',
            'amount' => 0,
            'account_id' => $account
        ];
        $this->action('POST', 'SettingsController@addAllowance',$data);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');

        $newCount = DB::table('settings')->where('name','specificAllowance')->where('date',$data['date'].'-01')
            ->where('value',$data['amount'])->count();

        $this->assertEquals(0,$newCount);

        foreach(Setting::where('name','specificAllowance')->get() as $s) {
            $s->delete();
        }

    }

    /**
     * @covers SettingsController::editAllowance
     */
    public function testEditAllowance()
    {
        // create specific amount-setting
        // edit it.
        $user = User::where('username', 'admin')->first();
        $account = $user->accounts()->first();
        $setting = Setting::create(
            [
                'user_id' => $user->id,
                'account_id' => $account->id,
                'type' => 'float',
                'name' => 'specificAllowance',
                'date' => '2013-01-01',
                'value' => 1200
            ]
        );
        $response = $this->call('GET','/home/allowance/'.$setting->id.'/edit');
        $view = $response->original;

        $this->assertResponseOk();
        $this->assertSessionHas('previous');
        $this->assertEquals($setting->id,$view['setting']->id);

        $setting->delete();
    }

    /**
     * @covers SettingsController::postEditAllowance
     */
    public function testPostEditAllowance()
    {
        $user = User::where('username', 'admin')->first();
        $account = $user->accounts()->first();
        $setting = Setting::create(
            [
                'user_id' => $user->id,
                'account_id' => $account->id,
                'type' => 'float',
                'name' => 'specificAllowance',
                'date' => '2013-01-01',
                'value' => 1200
            ]
        );

        // update setting:
        $data = [
            'account_id' => $account->id,
            'value' => 1100,
        ];

        $this->call('POST','/home/allowance/'.$setting->id.'/edit',$data);

        $setting = Setting::find($setting->id);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
        $this->assertEquals($data['value'],$setting->value);

        $setting->delete();
    }

    /**
     * @covers SettingsController::postEditAllowance
     */
    public function testPostEditAllowanceInvalidAccount()
    {
        $user = User::where('username', 'admin')->first();
        $account = $user->accounts()->first();
        $setting = Setting::create(
            [
                'user_id' => $user->id,
                'account_id' => $account->id,
                'type' => 'float',
                'name' => 'specificAllowance',
                'date' => '2013-01-01',
                'value' => 1200
            ]
        );
        $oldValue = $setting->value;

        // update setting:
        $data = [
            'account_id' => -1,
            'value' => 1100,
        ];

        $this->call('POST','/home/allowance/'.$setting->id.'/edit',$data);

        $setting = Setting::find($setting->id);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');
        $this->assertEquals($oldValue,$setting->value);

        $setting->delete();
    }

    /**
     * @covers SettingsController::postEditAllowance
     */
    public function testPostEditAllowanceFailsValidator()
    {
        $user = User::where('username', 'admin')->first();
        $account = $user->accounts()->first();
        $setting = Setting::create(
            [
                'user_id' => $user->id,
                'account_id' => $account->id,
                'type' => 'float',
                'name' => 'specificAllowance',
                'date' => '2013-01-01',
                'value' => 1200
            ]
        );
        $oldValue = $setting->value;

        // update setting:
        $data = [
            'account_id' => $account->id,
            'value' => 0,
        ];

        $this->call('POST','/home/allowance/'.$setting->id.'/edit',$data);

        $setting = Setting::find($setting->id);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');
        $this->assertEquals($oldValue,$setting->value);

        $setting->delete();
    }

    /**
     * @covers SettingsController::deleteAllowance
     */
    public function testDeleteAllowance()
    {
        // create specific amount-setting
        // edit it.
        $user = User::where('username', 'admin')->first();
        $account = $user->accounts()->first();
        $setting = Setting::create(
            [
                'user_id' => $user->id,
                'account_id' => $account->id,
                'type' => 'float',
                'name' => 'specificAllowance',
                'date' => '2013-01-01',
                'value' => 1200
            ]
        );
        $response = $this->call('GET','/home/allowance/'.$setting->id.'/delete');
        $view = $response->original;

        $this->assertResponseOk();
        $this->assertSessionHas('previous');
        $this->assertEquals($setting->id,$view['setting']->id);

        $setting->delete();
    }

    /**
     * @covers SettingsController::postDeleteAllowance
     */
    public function testPostDeleteAllowance()
    {
        // create specific amount-setting
        // edit it.
        $user = User::where('username', 'admin')->first();
        $account = $user->accounts()->first();
        $setting = Setting::create(
            [
                'user_id' => $user->id,
                'account_id' => $account->id,
                'type' => 'float',
                'name' => 'specificAllowance',
                'date' => '2013-01-01',
                'value' => 1200
            ]
        );
        $response = $this->call('POST','/home/allowance/'.$setting->id.'/delete');
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
        $count = DB::table('settings')->where('id',$setting->id)->count();
        $this->assertEquals(0,$count);

    }
}
