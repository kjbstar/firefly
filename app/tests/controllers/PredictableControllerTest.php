<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-09 at 16:58:47.
 */
class PredictableControllerTest extends TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $user = User::where('username', 'admin')->first();
        $this->be($user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers PredictableController::index
     */
    public function testIndex()
    {
        $response = $this->action('GET', 'PredictableController@index');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('All predictables', $view['title']);
        $this->assertCount(Predictable::count(), $view['predictables']);
    }

    /**
     * @covers PredictableController::overview
     */
    public function testOverview()
    {
        $predictable = Predictable::first();
        $response = $this->action('GET', 'PredictableController@overview', $predictable->id);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Overview for "' . $predictable->description . '"', $view['title']);
    }

    /**
     * @covers PredictableController::add
     */
    public function testAdd()
    {
        $response = $this->action('GET', 'PredictableController@add');
        $view = $response->original;

        $this->assertResponseOk();
        $this->assertEquals('Add a new predictable', $view['title']);

        $account = Account::count();
        $this->assertCount($account, $view['accounts']);
    }

    /**
     * @covers PredictableController::add
     */
    public function testAddWithOldInput()
    {
        $oldData = [
            'description' => 'Old predictable description (old input)'
        ];
        $this->session(['_old_input' => $oldData]);

        $response = $this->action('GET', 'PredictableController@add');
        $view = $response->original;

        $this->assertResponseOk();
        $this->assertEquals('Add a new predictable', $view['title']);

        $account = Account::count();
        $this->assertCount($account, $view['accounts']);

        $this->assertEquals($oldData['description'], $view['prefilled']['description']);
    }

    /**
     * @covers PredictableController::add
     */
    public function testAddFromTransaction()
    {
        $transaction = Transaction::first();

        $response = $this->action('GET', 'PredictableController@add', $transaction->id);
        $view = $response->original;

        $this->assertResponseOk();
        $this->assertEquals('Add a new predictable', $view['title']);

        $account = Account::count();
        $this->assertCount($account, $view['accounts']);

        $this->assertEquals($transaction->description, $view['prefilled']['description']);
    }

    /**
     * @covers PredictableController::postAdd
     */
    public function testPostAdd()
    {
        $account = Account::first();
        $newData = [
            'a'           => 'b',
            'account_id'  => $account->id,
            'amount'      => 20,
            'pct'         => 1,
            'dom'         => 12,
            'inactive'    => 0,
            'description' => 'Some new predictable' . rand(1000, 9999),
        ];
        $count = Predictable::count();
        $this->action('POST', 'PredictableController@postAdd', $newData);
        $newCount = Predictable::count();
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
        $this->assertEquals($count + 1, $newCount);

        Predictable::where('description', $newData['description'])->first()->delete();
    }

    /**
     * @covers PredictableController::postAdd
     */
    public function testPostAddFailValidator()
    {
        $account = Account::first();
        $newData = [
            'a'           => 'b',
            'account_id'  => $account->id,
            'amount'      => 20,
            'pct'         => 1,
            'dom'         => 12,
            'inactive'    => 0,
            'description' => null,
        ];
        $count = Predictable::count();
        $this->action('POST', 'PredictableController@postAdd', $newData);
        $newCount = Predictable::count();
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');
        $this->assertEquals($count, $newCount);
    }

    /**
     * @covers PredictableController::edit
     */
    public function testEdit()
    {
        $predictable = Predictable::first();
        $response = $this->action('GET', 'PredictableController@edit', $predictable->id);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Edit predictable ' . $predictable->description, $view['title']);
        $this->assertEquals($predictable->description, $view['prefilled']['description']);
    }

    /**
     * @covers PredictableController::edit
     */
    public function testEditWithOldInput()
    {
        $predictable = Predictable::first();

        $oldData = [
            'description' => 'Old predictable name (old input)'
        ];
        $this->session(['_old_input' => $oldData]);

        $response = $this->action('GET', 'PredictableController@edit', $predictable->id);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Edit predictable ' . $predictable->description, $view['title']);
        $this->assertEquals($oldData['description'], $view['prefilled']['description']);
    }

    /**
     * @covers PredictableController::postEdit
     */
    public function testPostEdit()
    {
        $user = User::whereUsername('admin')->first();
        $account = $user->accounts()->first();
        $new = [
            'user_id'     => $user->id,
            'description' => 'To be edited' . rand(1,999),
            'amount'      => 500,
            'dom'         => 1,
            'account_id'  => $account->id,
            'pct'         => 1,
            'inactive'    => 0
        ];

        Predictable::create($new);
        $predictable = Predictable::whereDescription($new['description'])->first();

        $editData = [
            'description' => 'Description is edited' . rand(1000, 9999),
            'account_id'  => $account->id,
            'amount'      => 500,
            'dom'         => 1,
            'pct'         => 1,
            'inactive'    => 0
        ];
        $this->call('POST', '/home/predictable/' . $predictable->id . '/edit', $editData);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
        $count = Predictable::whereDescription($editData['description'])->count();
        $this->assertEquals(1, $count);

        $predictable->delete();

    }

    /**
     * @covers PredictableController::postEdit
     */
    public function testPostEditFailsValidator()
    {
        $user = User::whereUsername('admin')->first();
        $account = $user->accounts()->first();
        $new = [
            'user_id'     => $user->id,
            'description' => 'To be edited' . rand(1,999),
            'amount'      => 500,
            'dom'         => 1,
            'account_id'  => $account->id,
            'pct'         => 1,
            'inactive'    => 0
        ];

        Predictable::create($new);
        $predictable = Predictable::whereDescription($new['description'])->first();

        $editData = [
            'description' => null,
            'account_id'  => $account->id,
            'amount'      => 500,
            'dom'         => 1,
            'pct'         => 1,
            'inactive'    => 0
        ];
        $this->call('POST', '/home/predictable/' . $predictable->id . '/edit', $editData);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');
        $count = Predictable::whereDescription($editData['description'])->count();
        $this->assertEquals(0, $count);

        $predictable->delete();

    }

    /**
     * @covers PredictableController::delete
     */
    public function testDelete()
    {
        $predictable = Predictable::first();
        $response = $this->action('GET', 'PredictableController@delete', $predictable->id);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Delete predictable ' . $predictable->description, $view['title']);
    }

    /**
     * @covers PredictableController::postDelete
     * @todo   Implement testPostDelete().
     */
    public function testPostDelete()
    {
        $user = User::whereUsername('admin')->first();
        $account = $user->accounts()->first();
        $new = [
            'user_id'     => $user->id,
            'description' => 'To be deleted ' . rand(1,999),
            'amount'      => 500,
            'dom'         => 1,
            'account_id'  => $account->id,
            'pct'         => 1,
            'inactive'    => 0
        ];

        Predictable::create($new);
        $predictable = Predictable::whereDescription($new['description'])->first();
        $count = Predictable::count();
        $this->call('POST', '/home/predictable/' . $predictable->id . '/delete');
        $newCount = Predictable::count();
        $this->assertSessionHas('success');
        $this->assertResponseStatus(302);
        $this->assertEquals($count-1,$newCount);
    }

    /**
     * @covers PredictableController::rescan
     * @todo   Implement testRescan().
     */
    public function testRescan()
    {
        $predictable = Predictable::first();
        $this->action('GET', 'PredictableController@rescan', $predictable->id);
        $this->assertSessionHas('success');
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('predictableoverview',$predictable->id);

    }
}
