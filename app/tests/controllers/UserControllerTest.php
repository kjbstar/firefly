<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-09 at 16:59:49.
 */
class UserControllerTest extends TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
//        $user = User::where('username', 'admin')->first();
//        $this->be($user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers UserController::login
     */
    public function testLogin()
    {
        $response = $this->action('GET', 'UserController@login');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Login', $view['title']);
    }

    /**
     * @covers UserController::postLogin
     */
    public function testPostLogin()
    {
        $user = User::where('username', 'admin')->first();
        $user->password = Hash::make('supersecret');
        $user->save();

        $data = [
            'username' => 'admin',
            'password' => 'supersecret'
        ];

        $this->action('POST', 'UserController@postLogin', $data);

        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('home');
    }

    /**
     * @covers UserController::postLogin
     */
    public function testPostLoginInvalid()
    {
        $user = User::where('username', 'admin')->first();
        $user->password = Hash::make('supersecret');
        $user->save();

        $data = [
            'username' => 'admin',
            'password' => 'verysecret'
        ];

        $response = $this->action('POST', 'UserController@postLogin', $data);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Incorrect login details', $view['warning']);
    }

    /**
     * @covers UserController::logout
     */
    public function testLogout()
    {
        $user = User::where('username', 'admin')->first();
        $this->be($user);
        $this->assertTrue(Auth::check());
        $this->action('GET', 'UserController@logout');
        $this->assertFalse(Auth::check());
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('index');
    }

    /**
     * @covers UserController::register
     */
    public function testRegister()
    {
        $response = $this->action('GET', 'UserController@register');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Register', $view['title']);
    }

    /**
     * @covers UserController::register
     */
    public function testRegisterDisabled()
    {
        Config::set('firefly.allowRegistration', false);
        $response = $this->action('GET', 'UserController@register');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Sorry, this instance does not allow registration.', $view['message']);
        Config::set('firefly.allowRegistration', true);
    }


    /**
     * @covers UserController::activate
     */
    public function testActivate()
    {
        $activation = Str::random(64);
        $user = User::create(
            [
                'username'       => 'tempUser',
                'origin'         => '',
                'email'          => 'user@temp',
                'password'       => Hash::make('supersecret'),
                'activation'     => $activation,
                'remember_token' => null,
                'reset'          => null
            ]
        );

        $response = $this->action('GET', 'UserController@activate', $activation);
        $view = $response->original;
        $this->assertEquals('Activated', $view['title']);
        $this->assertResponseOk();

        $updatedUser = User::find($user->id);
        $this->assertNull($updatedUser->activation);
        $updatedUser->forceDelete();
    }

    /**
     * @covers UserController::postRegister
     */
    public function testPostRegister()
    {
        $data = [
            'email' => 'valid@example.com',
        ];

        $count = User::count();
        $response = $this->action('POST', 'UserController@postRegister', $data);
        $view = $response->original;
        $newCount = User::count();
        $this->assertResponseOk();
        $this->assertEquals($count+1,$newCount);
        $this->assertEquals('Registered!',$view['title']);

        $user = User::where('email',$data['email'])->first();
        $user->forceDelete();
    }

    /**
     * @covers UserController::postRegister
     */
    public function testPostRegisterNoRegistration()
    {
        Config::set('firefly.allowRegistration', false);
        $data = [
            'email' => 'valid@example.com',
        ];

        $count = User::count();
        $response = $this->action('POST', 'UserController@postRegister', $data);
        $view = $response->original;
        $this->assertEquals('Sorry, this instance does not allow registration.',$view['message']);
        $newCount = User::count();
        $this->assertEquals($count,$newCount);
        Config::set('firefly.allowRegistration', true);
    }

    /**
     * @covers UserController::postRegister
     */
    public function testPostRegisterFailedValidator()
    {
        $data = [
            'email' => 'invalid_email',
        ];

        $count = User::count();
        $response = $this->action('POST', 'UserController@postRegister', $data);
        $view = $response->original;
        $newCount = User::count();
        $this->assertResponseOk();
        $this->assertEquals($count,$newCount);
        $this->assertEquals('Invalid e-mail address.',$view['warning']);
        $this->assertEquals('Register',$view['title']);
    }
    /**
     * @covers UserController::reset
     */
    public function testReset()
    {
        $response = $this->action('GET', 'UserController@reset');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Reset password', $view['title']);
    }

    /**
     * @covers UserController::postReset
     * @todo   Implement testPostReset().
     */
    public function testPostReset()
    {
        $user = User::create(
            [
                'username'       => 'tempUser',
                'origin'         => '',
                'email'          => 'user@temp',
                'password'       => Hash::make('supersecret'),
                'activation'     => null,
                'remember_token' => null,
                'reset'          => null
            ]
        );

        $data = [
            'username' => 'tempUser',
        ];

        $this->action('POST', 'UserController@postReset', $data);
        $updatedUser = User::find($user->id);
        $this->assertResponseOk();
        $this->assertNotNull($updatedUser->reset);
        $updatedUser->forceDelete();
    }

    /**
     * @covers UserController::resetme
     */
    public function testResetme()
    {
        $reset = Str::random(64);
        $user = User::create(
            [
                'username'       => 'tempUser',
                'origin'         => '',
                'email'          => 'user@temp',
                'password'       => Hash::make('supersecret'),
                'activation'     => null,
                'remember_token' => null,
                'reset'          => $reset
            ]
        );
        $this->action('GET', 'UserController@resetme', $reset);
        $updatedUser = User::find($user->id);

        $this->assertNull($updatedUser->reset);

        $updatedUser->forceDelete();
    }
}
