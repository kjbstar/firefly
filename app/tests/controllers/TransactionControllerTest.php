<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-09 at 16:59:15.
 */
class TransactionControllerTest extends TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $user = User::where('username', 'admin')->first();
        $this->be($user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers TransactionController::index
     */
    public function testIndex()
    {
        $response = $this->action('GET', 'TransactionController@index');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertTrue(count($view['transactions']) <= 25);
        $this->assertEquals('All transactions', $view['title']);
    }

    /**
     * @covers TransactionController::add
     */
    public function testAdd()
    {
        $response = $this->action('GET', 'TransactionController@add');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertSessionHas('previous');
        $this->assertEquals(date('Y-m-d'), $view['prefilled']['date']);
        $this->assertEquals('Add a transaction', $view['title']);
    }

    /**
     * @covers TransactionController::add
     */
    public function testAddWithOldInput()
    {
        $oldData = [
            'description' => 'Old input (new transaction)',
        ];
        $this->session(['_old_input' => $oldData]);

        $response = $this->action('GET', 'TransactionController@add');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals($oldData['description'], $view['prefilled']['description']);
        $this->assertEquals('Add a transaction', $view['title']);
    }

    /**
     * @covers TransactionController::add
     */
    public function testAddFromPredictable()
    {
        $predictable = Predictable::first();

        $response = $this->action('GET', 'TransactionController@add', $predictable->id);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals($predictable->description, $view['prefilled']['description']);
        $this->assertEquals('Add a transaction', $view['title']);
    }

    /**
     * @covers TransactionController::postAdd
     */
    public function testPostAdd()
    {
        $account = Account::first();
        $data = [
            'a'                => 'b',
            'date'             => date('Y-m-d'),
            'amount'           => '-100',
            'account_id'       => $account->id,
            'ignoreprediction' => 0,
            'ignoreallowance'  => 0,
            'mark'             => 0,
            'description'      => 'Add new transaction #' . rand(1000, 9999),
        ];
        $count = Transaction::count();
        $this->action('POST', 'TransactionController@postAdd', $data);
        $newCount = Transaction::count();
        $this->assertResponseStatus(302);
        $this->assertEquals($count + 1, $newCount);
        $this->assertSessionHas('success');

        // remove the transaction again:
        $transaction = Transaction::where('description', $data['description'])->first();
        $transaction->delete();
    }

    /**
     * @covers TransactionController::postAdd
     */
    public function testPostAddFailsValidator()
    {
        $account = Account::first();
        $data = [
            'a'                => 'b',
            'date'             => date('Y-m-d'),
            'amount'           => '-100',
            'account_id'       => $account->id,
            'ignoreprediction' => 0,
            'ignoreallowance'  => 0,
            'mark'             => 0,
            'description'      => null,
        ];
        $count = Transaction::count();
        $this->action('POST', 'TransactionController@postAdd', $data);
        $newCount = Transaction::count();
        $this->assertResponseStatus(302);
        $this->assertEquals($count, $newCount);
        $this->assertSessionHas('error');
    }

    /**
     * @covers TransactionController::postAdd
     */
    public function testPostAddInvalidAccount()
    {
        $data = [
            'a'                => 'b',
            'date'             => date('Y-m-d'),
            'amount'           => '-100',
            'account_id'       => null,
            'ignoreprediction' => 0,
            'ignoreallowance'  => 0,
            'mark'             => 0,
            'description'      => 'Bla bla',
        ];
        $count = Transaction::count();
        $this->action('POST', 'TransactionController@postAdd', $data);
        $newCount = Transaction::count();
        $this->assertResponseStatus(302);
        $this->assertEquals($count, $newCount);
        $this->assertSessionHas('error');
    }

    /**
     * @covers TransactionController::postAdd
     */
    public function testPostAddFailsTrigger()
    {
        $account = Account::first();
        $invalidDate = clone $account->openingbalancedate;
        $invalidDate->subMonths(3);
        $data = [
            'a'                => 'b',
            'date'             => $invalidDate->format('Y-m-d'),
            'amount'           => '-100',
            'account_id'       => $account->id,
            'ignoreprediction' => 0,
            'ignoreallowance'  => 0,
            'mark'             => 0,
            'description'      => "I will fail.",
        ];
        $count = Transaction::count();
        $this->action('POST', 'TransactionController@postAdd', $data);
        $newCount = Transaction::count();
        $this->assertResponseStatus(302);
        $this->assertEquals($count, $newCount);
        $this->assertSessionHas('error');
    }

    /**
     * @covers TransactionController::edit
     */
    public function testEdit()
    {
        $transaction = Transaction::first();
        $response = $this->action('GET', 'TransactionController@edit', $transaction->id);
        $view = $response->original;
        $this->assertEquals($transaction->description, $view['prefilled']['description']);
        $this->assertResponseOk();
        $this->assertSessionHas('previous');
    }

    /**
     * @covers TransactionController::edit
     */
    public function testEditWithOldInput()
    {
        $oldData = [
            'description' => 'Old input (edited transaction)',
        ];
        $this->session(['_old_input' => $oldData]);

        $transaction = Transaction::first();
        $response = $this->action('GET', 'TransactionController@edit', $transaction->id);
        $view = $response->original;
        $this->assertEquals($oldData['description'], $view['prefilled']['description']);
        $this->assertEquals('Edit transaction ' . $transaction->description, $view['title']);
        $this->assertResponseOk();
    }

    /**
     * @covers TransactionController::postEdit
     */
    public function testPostEdit()
    {
        $user = User::where('username', 'admin')->first();
        $account = Account::first();
        Eloquent::unguard();
        $transaction = Transaction::create(
            [
                'created_at'       => date('Y-m-d H:i:s'),
                'updated_at'       => date('Y-m-d H:i:s'),
                'user_id'          => $user->id,
                'account_id'       => $account->id,
                'predictable_id'   => null,
                'description'      => 'Test transaction',
                'amount'           => 1000,
                'date'             => '2014-01-02',
                'ignoreprediction' => 0,
                'ignoreallowance'  => 0,
                'mark'             => 0,
            ]
        );
        Eloquent::reguard();

        $newData = [
            'description' => 'Edited transaction for edit #' . rand(1000, 9999),
            'account_id'  => $account->id,
            'amount'      => 1000,
            'date'        => '2014-01-02',
        ];


        $this->call('POST', '/home/transaction/' . $transaction->id . '/edit/', $newData);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
        $transaction = Transaction::find($transaction->id);
        $this->assertEquals($newData['description'], $transaction->description);

        $transaction->delete();

    }

    /**
     * @covers TransactionController::postEdit
     */
    public function testPostEditFailsValidator()
    {
        $user = User::where('username', 'admin')->first();
        $account = Account::first();
        Eloquent::unguard();
        $transaction = Transaction::create(
            [
                'created_at'       => date('Y-m-d H:i:s'),
                'updated_at'       => date('Y-m-d H:i:s'),
                'user_id'          => $user->id,
                'account_id'       => $account->id,
                'predictable_id'   => null,
                'description'      => 'Test transaction',
                'amount'           => 1000,
                'date'             => '2014-01-02',
                'ignoreprediction' => 0,
                'ignoreallowance'  => 0,
                'mark'             => 0,
            ]
        );
        Eloquent::reguard();

        $newData = [
            'description' => null,
            'account_id'  => $account->id,
            'amount'      => 1000,
            'date'        => '2014-01-02',
        ];


        $this->call('POST', '/home/transaction/' . $transaction->id . '/edit/', $newData);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');
        $transaction->delete();
    }

    /**
     * @covers TransactionController::postEdit
     */
    public function testPostEditFailsTrigger()
    {
        $user = User::where('username', 'admin')->first();
        $account = Account::first();
        Eloquent::unguard();
        $transaction = Transaction::create(
            [
                'created_at'       => date('Y-m-d H:i:s'),
                'updated_at'       => date('Y-m-d H:i:s'),
                'user_id'          => $user->id,
                'account_id'       => $account->id,
                'predictable_id'   => null,
                'description'      => 'Test transaction',
                'amount'           => 1000,
                'date'             => '2014-01-02',
                'ignoreprediction' => 0,
                'ignoreallowance'  => 0,
                'mark'             => 0,
            ]
        );
        Eloquent::reguard();

        $newData = [
            'description' => 'Bla bla bla bla',
            'account_id'  => $account->id,
            'amount'      => 1000,
            'date'        => '2012-01-02',
        ];


        $this->call('POST', '/home/transaction/' . $transaction->id . '/edit/', $newData);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');
        $transaction->delete();
    }

    /**
     * @covers TransactionController::postEdit
     */
    public function testPostEditInvalidAccount()
    {
        $user = User::where('username', 'admin')->first();
        $account = Account::first();
        Eloquent::unguard();
        $transaction = Transaction::create(
            [
                'created_at'       => date('Y-m-d H:i:s'),
                'updated_at'       => date('Y-m-d H:i:s'),
                'user_id'          => $user->id,
                'account_id'       => $account->id,
                'predictable_id'   => null,
                'description'      => 'Test transaction',
                'amount'           => 1000,
                'date'             => '2014-01-02',
                'ignoreprediction' => 0,
                'ignoreallowance'  => 0,
                'mark'             => 0,
            ]
        );
        Eloquent::reguard();

        $newData = [
            'description' => 'Bla bla bla bla',
            'account_id'  => -1,
            'amount'      => 1000,
            'date'        => '2014-01-02',
        ];


        $this->call('POST', '/home/transaction/' . $transaction->id . '/edit/', $newData);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('error');
        $transaction->delete();
    }

    /**
     * @covers TransactionController::delete
     */
    public function testDelete()
    {
        $transaction = Transaction::first();
        $response = $this->action('GET', 'TransactionController@delete', $transaction->id);
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertSessionHas('previous');
        $this->assertEquals('Delete transaction ' . $transaction->description, $view['title']);
    }

    /**
     * @covers TransactionController::postDelete
     */
    public function testPostDelete()
    {
        $user = User::where('username', 'admin')->first();
        $account = Account::first();
        Eloquent::unguard();
        $transaction = Transaction::create(
            [
                'created_at'       => date('Y-m-d H:i:s'),
                'updated_at'       => date('Y-m-d H:i:s'),
                'user_id'          => $user->id,
                'account_id'       => $account->id,
                'predictable_id'   => null,
                'description'      => 'Test transaction',
                'amount'           => 1000,
                'date'             => '2014-01-02',
                'ignoreprediction' => 0,
                'ignoreallowance'  => 0,
                'mark'             => 0,
            ]
        );
        Eloquent::reguard();
        $count = Transaction::count();
        $this->action('POST', 'TransactionController@postDelete', $transaction->id);
        $newCount = Transaction::count();
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
        $this->assertEquals($count - 1, $newCount);

    }
}
