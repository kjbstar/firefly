<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-09 at 16:58:52.
 */
class ProfileControllerTest extends TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $user = User::where('username', 'admin')->first();
        $this->be($user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ProfileController::index
     */
    public function testIndex()
    {
        $response = $this->action('GET', 'ProfileController@index');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Profile', $view['title']);
        $this->assertCount(9, $view['stats']);
    }

    /**
     * @covers ProfileController::changePassword
     */
    public function testChangePassword()
    {
        $response = $this->action('GET', 'ProfileController@changePassword');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Change password', $view['title']);
    }

    /**
     * @covers ProfileController::postChangePassword
     */
    public function testPostChangePassword()
    {
        $user = User::where('username', 'admin')->first();
        $user->password = Hash::make('supersecret');
        $user->save();
        $newPassword = 'verysecret';
        $data = [
            'current'  => 'supersecret',
            'new'      => $newPassword,
            'newagain' => $newPassword
        ];
        $this->call('POST', '/home/profile/password', $data);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('profile');
        $this->assertSessionHas('success');

        $user->password = Hash::make('supersecret');
        $user->save();
    }

    /**
     * @covers ProfileController::postChangePassword
     */
    public function testPostChangePasswordOldMismatch()
    {
        $newPassword = 'verysecret';
        $data = [
            'current'  => 'wrongCurrentPassword',
            'new'      => $newPassword,
            'newagain' => $newPassword
        ];
        $this->call('POST', '/home/profile/password', $data);
        $this->assertResponseStatus(200);
        $this->assertSessionHas('error');

    }

    /**
     * @covers ProfileController::postChangePassword
     */
    public function testPostChangePasswordNewMismatch()
    {
        $newPassword = 'verysecret';
        $data = [
            'current'  => 'supersecret',
            'new'      => $newPassword,
            'newagain' => $newPassword.'Mismatch'
        ];
        $this->call('POST', '/home/profile/password', $data);
        $this->assertResponseStatus(200);
        $this->assertSessionHas('error');
    }

    /**
     * @covers ProfileController::postChangePassword
     */
    public function testPostChangePasswordNewTooShort()
    {
        $newPassword = 'verysecret';
        $data = [
            'current'  => 'supersecret',
            'new'      => '',
            'newagain' => ''
        ];
        $this->call('POST', '/home/profile/password', $data);
        $this->assertResponseStatus(200);
        $this->assertSessionHas('error');
    }

    /**
     * @covers ProfileController::changeUsername
     */
    public function testChangeUsername()
    {
        $response = $this->action('GET', 'ProfileController@changeUsername');
        $view = $response->original;
        $this->assertResponseOk();
        $this->assertEquals('Change username', $view['title']);
    }

    /**
     * @covers ProfileController::postChangeUsername
     */
    public function testPostChangeUsername()
    {
        $data = [
            'username'  => 'admin_again',
        ];
        $this->call('POST', '/home/profile/username', $data);
        $this->assertResponseStatus(302);
        $this->assertRedirectedToRoute('profile');
        $this->assertSessionHas('success');

        $user = User::whereUsername($data['username'])->first();
        $user->username = 'admin';
        $user->save();
    }
    /**
     * @covers ProfileController::postChangeUsername
     */
    public function testPostChangeUsernameExistingUser()
    {
        $data = [
            'username'  => 'existingUser',
        ];
        $this->call('POST', '/home/profile/username', $data);
        $this->assertResponseOk();
        $this->assertSessionHas('error');
    }
    /**
     * @covers ProfileController::postChangeUsername
     */
    public function testPostChangeUsernameNothingChanged()
    {
        $data = [
            'username'  => 'admin',
        ];
        $this->call('POST', '/home/profile/username', $data);
        $this->assertResponseOk();
        $this->assertSessionHas('error');

    }
    /**
     * @covers ProfileController::postChangeUsername
     */
    public function testPostChangeUsernameFailsValidator()
    {
        $data = [
            'username'  => null,
        ];
        $this->call('POST', '/home/profile/username', $data);
        $this->assertResponseOk();
        $this->assertSessionHas('error');
    }
}
